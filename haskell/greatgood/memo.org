#+title: Learn You a Haskell for Great Good
#+author: matsuyoshi30

Haskell メモ

** Haskell とは

   非正格評価を特徴とする純粋関数型プログラミング言語

   非性格とは、関数に与えられた引数などの式はどうしても必要になるまで評価されないということ

   命令型は「何をするか」を定義し、関数型は「何であるか」を定義する

   純粋関数型は副作用を持たず、関数の処理結果が外部の環境などに作用されず、同じ引数を与えられれば常に同じ結果を返す（参照透過性）

   →ユーザーによる入力によってコンソールに出力する内容が変わる、というのも副作用

   →上記のケースは Haskell だと「関数はXXという内容をコンソールに書き出すIOモナドを生成して返却する」ように処理される


** Learn You a Haskell for Great Good

*** ch01

    演算子 +, -, *, / も関数の一つ（中置関数）

    関数はどの演算子よりも優先順位が高い

    if-then-else: if 文書くときは常に else も書く

    リストの操作には注意が必要で、結合時は結合される ++ の左のリストは先頭から末尾まで走査するので、対象のリストのサイズが大きいときはそれだけ実行時間がかかる。一方で、リストの先頭に何かを追加するような処理ははやい

    リスト内包表記によって take 10 [2,4..] が [x*2 | x <- [1..10]] と書ける

    各辺の長さが10以下で、各辺の合計が24である直角三角形の辺の組み合わせの求め方

    #+begin_src
    Prelude> let rightTriangles = [(a,b,c) | c <- [1..10], a <- [1..c], b <- [1..a], a^2 + b^2 == c^2, a+b+c==24]
    Prelude> rightTriangles
    [(8,6,10)]
    #+end_src

    最初に解の候補となる集合を生成し、それから1つ（もしくは複数）の解に辿り着くまで変換とフィルタリングを行うという手法は、関数プログラミングでよく用いられるパターン

*** ch02

    型についての話

    すべての式が型を持つ。関数も型を持つ。作成する関数について型を調べたい場合は、関数の型を明示的に書かずに型推論させるように書いて、それをインタプリタにロードして :t すると便利

    型の名前は大文字で始まる。任意の型を取る型変数は a とか小文字一文字にするのが慣習

    型クラス＝関数（メソッド）の集まり。Goでいうインターフェースで、振る舞いを定義。Eq, Ord, Show, Read(型注釈), Enum, Bounded, Num, Floating, Integral

    型クラスのインスタンスである型＝型クラスが定義している振る舞いを実装する
